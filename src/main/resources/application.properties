# Application name
spring.application.name=honeyRest_user

app.base-url=http://localhost:5173


# Database configuration (MariaDB)
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/honey_rest_db
spring.datasource.username=root
#spring.datasource.password={secured in application_security.properties}

# JPA settings
# Use 'none' or 'validate' in production
spring.jpa.hibernate.ddl-auto=update
# Show SQL queries in logs
spring.jpa.show-sql=true
# Format SQL output
spring.jpa.properties.hibernate.format_sql=true

# Static resource mapping (for React build)
spring.web.resources.add-mappings=true
spring.web.resources.static-locations=classpath:/static/

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# Multipart file upload settings
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=20MB
# Local file storage path
file.upload-dir=uploads/

#file base
file.storage.type=s3
#file.s3.accessKey={secured in application_security.properties}
#file.s3.secretKey={secured in application_security.properties}
file.s3.bucketName=honeyrest
file.s3.endpoint=https://s3.filebase.com


# Swagger (springdoc-openapi)
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.override-with-generic-response=false

# Redis configuration

# Use Redis for caching
spring.cache.type=redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.cache.redis.time-to-live= 3600000


# Token expiration in milliseconds (1 hour)
# JWT configuration
jwt.secret-key= ${jwt.secret-key-value}
jwt.access-expiration= 3600000
jwt.refresh-expiration= 604800000



# Gmail SMTP setting
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${gmail.username}
spring.mail.password=${gmail.access-token}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Spring Batch settings
# Initialize batch schema on startup
spring.batch.jdbc.initialize-schema=always


# OAuth2 Client Registration
spring.security.oauth2.client.registration.google.client-id=${google.client-id}
spring.security.oauth2.client.registration.google.client-secret=${google.client-secret}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile

# OAuth2 Provider setting (Google)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# OAuth2 Client Registration Kakao
spring.security.oauth2.client.registration.kakao.client-id=${kakao.client-id}
spring.security.oauth2.client.registration.kakao.client-secret=${kakao.client-secret}
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.scope=profile,account_email
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-name=Kakao
kakao.redirect-uri=http://localhost:5173/login/kakao/callback

# OAuth2 Provider setting (Kakao)
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id


# Import sensitive configuration
spring.config.import=classpath:application_security.properties